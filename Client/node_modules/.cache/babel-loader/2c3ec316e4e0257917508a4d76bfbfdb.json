{"ast":null,"code":"var _jsxFileName = \"/Users/arnabdhar/Desktop/meetingbuddy/src/Pages/Home/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { ReactMic } from 'react-mic';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst Home = () => {\n  _s();\n\n  const [record, setRecord] = useState(false);\n  const [blob, setBlob] = useState(null);\n\n  const onData = data => {// console.log(data,'====ondata');\n  };\n\n  const startRecording = () => {\n    setRecord(true);\n  };\n\n  const stopRecording = () => {\n    setRecord(false);\n  };\n\n  const onStop = async recordedBlob => {\n    console.log('recordedBlob is: ', recordedBlob); // const base64 =  await covertToBase64(recordedBlob.blob)\n    // console.log(recordedBlob.blob,'====base64');\n\n    var reader = new FileReader();\n    reader.readAsDataURL(recordedBlob.blob);\n\n    reader.onloadend = function () {\n      let base64String = reader.result;\n      setBlob(base64String);\n    };\n  };\n\n  useEffect(() => {\n    navigator.mediaDevices.getUserMedia({\n      audio: true\n    }).then(stream => {\n      if (!MediaRecorder.isTypeSupported('audio/webm')) return alert('Not Supported');\n      const mediaRecorder = new MediaRecorder(stream, {\n        mimeType: 'audio/webm'\n      });\n      const socket = new WebSocket('wss://api.deepgram.com/v1/listen', ['token', 'f82b56da5c01b7269de515338e536bf444e77385']);\n\n      socket.onopen = () => {\n        console.log('opened');\n        mediaRecorder.addEventListener('dataavailable', event => {\n          socket.send(event.data);\n        });\n        mediaRecorder.start(250);\n      };\n\n      socket.onmessage = message => {\n        // console.log(message,'message');\n        const data = JSON.parse(message.data);\n        const transcript = data.channel.alternatives[0].transcript;\n\n        if (transcript && data.is_final) {\n          console.log(transcript);\n        }\n      };\n    });\n  }, []);\n  console.log(blob, '=====asdasdsadasd');\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(ReactMic, {\n      record: record,\n      className: \"sound-wave\",\n      onStop: onStop,\n      onData: onData,\n      strokeColor: \"#000000\",\n      backgroundColor: \"#FF4081\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: startRecording,\n      type: \"button\",\n      children: \"Start\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: stopRecording,\n      type: \"button\",\n      children: \"Stop\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n\n_s(Home, \"iUzgABKPU1dOO58r7t2/rQ0Gt1E=\");\n\n_c = Home;\nexport default Home;\n\nvar _c;\n\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"sources":["/Users/arnabdhar/Desktop/meetingbuddy/src/Pages/Home/index.tsx"],"names":["React","useState","useEffect","ReactMic","Home","record","setRecord","blob","setBlob","onData","data","startRecording","stopRecording","onStop","recordedBlob","console","log","reader","FileReader","readAsDataURL","onloadend","base64String","result","navigator","mediaDevices","getUserMedia","audio","then","stream","MediaRecorder","isTypeSupported","alert","mediaRecorder","mimeType","socket","WebSocket","onopen","addEventListener","event","send","start","onmessage","message","JSON","parse","transcript","channel","alternatives","is_final"],"mappings":"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","sourcesContent":["import React,{useState,useEffect} from 'react';\nimport { ReactMic } from 'react-mic';\n\nconst Home:React.FC = () =>{\n    const [record,setRecord] = useState<boolean>(false)\n    const [blob,setBlob] = useState<any>(null)\n\n    const onData = (data:Blob) =>{\n        // console.log(data,'====ondata');\n        \n    }\n    const startRecording = () => {\n        setRecord(true)\n    }\n     \n     const stopRecording = () => {\n        setRecord(false)\n    }\n    const onStop = async (recordedBlob:any) =>{\n        console.log('recordedBlob is: ', recordedBlob);\n        // const base64 =  await covertToBase64(recordedBlob.blob)\n        // console.log(recordedBlob.blob,'====base64');\n        var reader = new FileReader();\n        reader.readAsDataURL(recordedBlob.blob);\n        reader.onloadend = function () {\n            let base64String = reader.result;\n            setBlob(base64String)\n        }\n        \n    }\n    useEffect(()=>{\n        navigator.mediaDevices.getUserMedia({audio: true}).then(stream=>{\n            if(!MediaRecorder.isTypeSupported('audio/webm')) return alert('Not Supported')\n            const mediaRecorder = new MediaRecorder(stream,{mimeType:'audio/webm'})\n            const socket = new WebSocket('wss://api.deepgram.com/v1/listen',['token','f82b56da5c01b7269de515338e536bf444e77385'])\n            socket.onopen = () =>{\n                console.log('opened');\n                mediaRecorder.addEventListener('dataavailable',event =>{\n                    socket.send(event.data)\n                })\n                mediaRecorder.start(250)\n            }\n            socket.onmessage = message =>{\n                // console.log(message,'message');\n                const data = JSON.parse(message.data)\n                const transcript = data.channel.alternatives[0].transcript\n                if(transcript && data.is_final){\n                    console.log(transcript)\n                }\n                \n            }\n            \n        })\n    },[])\n\n    console.log(blob,'=====asdasdsadasd');\n    \n\n    return <>\n        <ReactMic\n          record={record}\n          className=\"sound-wave\"\n          onStop={onStop}\n          onData={onData}\n          strokeColor=\"#000000\"\n          backgroundColor=\"#FF4081\" />\n        <button onClick={startRecording} type=\"button\">Start</button>\n        <button onClick={stopRecording} type=\"button\">Stop</button>\n    </>\n}\n\nexport default Home"]},"metadata":{},"sourceType":"module"}