{"ast":null,"code":"var BufferReader = require('./lib/buffer-reader');\n\nvar XIPH_LACING = 1;\nvar EBML_LACING = 3;\nvar FIXED_SIZE_LACING = 2;\n\nmodule.exports = function (buffer) {\n  var block = {};\n  var reader = new BufferReader(buffer);\n  block.trackNumber = reader.nextUIntV();\n  block.timecode = reader.nextInt16BE();\n  var flags = reader.nextUInt8();\n  block.invisible = !!(flags & 0x8); // only valid for SimpleBlock\n\n  block.keyframe = !!(flags & 0x80);\n  block.discardable = !!(flags & 0x1);\n  var lacing = (flags & 0x6) >> 1;\n  block.frames = readLacedData(reader, lacing);\n  return block;\n};\n\nfunction readLacedData(reader, lacing) {\n  if (!lacing) return [reader.nextBuffer()];\n  var i, frameSize;\n  var frames = [];\n  var framesNum = reader.nextUInt8() + 1; // number of frames\n\n  if (lacing === FIXED_SIZE_LACING) {\n    // remaining data should be divisible by the number of frames\n    if (reader.length % framesNum !== 0) throw new Error('Fixed-Size Lacing Error');\n    frameSize = reader.length / framesNum;\n\n    for (i = 0; i < framesNum; i++) {\n      frames.push(reader.nextBuffer(frameSize));\n    }\n\n    return frames;\n  }\n\n  var frameSizes = [];\n\n  if (lacing === XIPH_LACING) {\n    for (i = 0; i < framesNum - 1; i++) {\n      var val;\n      frameSize = 0;\n\n      do {\n        val = reader.nextUInt8();\n        frameSize += val;\n      } while (val === 0xff);\n\n      frameSizes.push(frameSize);\n    }\n  } else if (lacing === EBML_LACING) {\n    // first frame\n    frameSize = reader.nextUIntV();\n    frameSizes.push(frameSize); // middle frames\n\n    for (i = 1; i < framesNum - 1; i++) {\n      frameSize += reader.nextIntV();\n      frameSizes.push(frameSize);\n    }\n  }\n\n  for (i = 0; i < framesNum - 1; i++) {\n    frames.push(reader.nextBuffer(frameSizes[i]));\n  } // last frame (remaining buffer)\n\n\n  frames.push(reader.nextBuffer());\n  return frames;\n}","map":{"version":3,"sources":["/Users/arnabdhar/Desktop/meetingbuddy/node_modules/ebml-block/index.js"],"names":["BufferReader","require","XIPH_LACING","EBML_LACING","FIXED_SIZE_LACING","module","exports","buffer","block","reader","trackNumber","nextUIntV","timecode","nextInt16BE","flags","nextUInt8","invisible","keyframe","discardable","lacing","frames","readLacedData","nextBuffer","i","frameSize","framesNum","length","Error","push","frameSizes","val","nextIntV"],"mappings":"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","sourcesContent":["var BufferReader = require('./lib/buffer-reader')\n\nvar XIPH_LACING = 1\nvar EBML_LACING = 3\nvar FIXED_SIZE_LACING = 2\n\nmodule.exports = function (buffer) {\n  var block = {}\n  var reader = new BufferReader(buffer)\n\n  block.trackNumber = reader.nextUIntV()\n  block.timecode = reader.nextInt16BE()\n\n  var flags = reader.nextUInt8()\n\n  block.invisible = !!(flags & 0x8)\n\n  // only valid for SimpleBlock\n  block.keyframe = !!(flags & 0x80)\n  block.discardable = !!(flags & 0x1)\n\n  var lacing = (flags & 0x6) >> 1\n\n  block.frames = readLacedData(reader, lacing)\n\n  return block\n}\n\nfunction readLacedData (reader, lacing) {\n  if (!lacing) return [reader.nextBuffer()]\n\n  var i, frameSize\n  var frames = []\n  var framesNum = reader.nextUInt8() + 1 // number of frames\n\n  if (lacing === FIXED_SIZE_LACING) {\n    // remaining data should be divisible by the number of frames\n    if (reader.length % framesNum !== 0) throw new Error('Fixed-Size Lacing Error')\n\n    frameSize = reader.length / framesNum\n    for (i = 0; i < framesNum; i++) {\n      frames.push(reader.nextBuffer(frameSize))\n    }\n    return frames\n  }\n\n  var frameSizes = []\n\n  if (lacing === XIPH_LACING) {\n    for (i = 0; i < framesNum - 1; i++) {\n      var val\n      frameSize = 0\n      do {\n        val = reader.nextUInt8()\n        frameSize += val\n      } while (val === 0xff)\n      frameSizes.push(frameSize)\n    }\n  } else if (lacing === EBML_LACING) {\n    // first frame\n    frameSize = reader.nextUIntV()\n    frameSizes.push(frameSize)\n\n    // middle frames\n    for (i = 1; i < framesNum - 1; i++) {\n      frameSize += reader.nextIntV()\n      frameSizes.push(frameSize)\n    }\n  }\n\n  for (i = 0; i < framesNum - 1; i++) {\n    frames.push(reader.nextBuffer(frameSizes[i]))\n  }\n\n  // last frame (remaining buffer)\n  frames.push(reader.nextBuffer())\n\n  return frames\n}\n"]},"metadata":{},"sourceType":"script"}