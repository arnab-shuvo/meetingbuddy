{"ast":null,"code":"var vint = require('./vint');\n\nfunction BufferReader(buffer) {\n  this.buffer = buffer;\n  this.offset = 0;\n} // a super limited subset of the node buffer API\n\n\nBufferReader.prototype.nextInt16BE = function () {\n  var value = this.buffer.readInt16BE(this.offset);\n  this.offset += 2;\n  return value;\n};\n\nBufferReader.prototype.nextUInt8 = function () {\n  var value = this.buffer.readUInt8(this.offset);\n  this.offset += 1;\n  return value;\n}; // EBML variable sized integers\n\n\nBufferReader.prototype.nextUIntV = function () {\n  var v = vint(this.buffer, this.offset);\n  this.offset += v.length;\n  return v.value;\n};\n\nBufferReader.prototype.nextIntV = function () {\n  var v = vint(this.buffer, this.offset, true);\n  this.offset += v.length;\n  return v.value;\n}; // buffer slice\n\n\nBufferReader.prototype.nextBuffer = function (length) {\n  var buffer = length ? this.buffer.slice(this.offset, this.offset + length) : this.buffer.slice(this.offset);\n  this.offset += length || this.length;\n  return buffer;\n}; // remaining bytes to read\n\n\nObject.defineProperty(BufferReader.prototype, 'length', {\n  get: function () {\n    return this.buffer.length - this.offset;\n  }\n});\nmodule.exports = BufferReader;","map":{"version":3,"sources":["/Users/arnabdhar/Desktop/meetingbuddy/node_modules/ebml-block/lib/buffer-reader.js"],"names":["vint","require","BufferReader","buffer","offset","prototype","nextInt16BE","value","readInt16BE","nextUInt8","readUInt8","nextUIntV","v","length","nextIntV","nextBuffer","slice","Object","defineProperty","get","module","exports"],"mappings":"AAAA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AAEA,SAASC,YAAT,CAAuBC,MAAvB,EAA+B;AAC7B,OAAKA,MAAL,GAAcA,MAAd;AACA,OAAKC,MAAL,GAAc,CAAd;AACD,C,CAED;;;AACAF,YAAY,CAACG,SAAb,CAAuBC,WAAvB,GAAqC,YAAY;AAC/C,MAAIC,KAAK,GAAG,KAAKJ,MAAL,CAAYK,WAAZ,CAAwB,KAAKJ,MAA7B,CAAZ;AACA,OAAKA,MAAL,IAAe,CAAf;AACA,SAAOG,KAAP;AACD,CAJD;;AAMAL,YAAY,CAACG,SAAb,CAAuBI,SAAvB,GAAmC,YAAY;AAC7C,MAAIF,KAAK,GAAG,KAAKJ,MAAL,CAAYO,SAAZ,CAAsB,KAAKN,MAA3B,CAAZ;AACA,OAAKA,MAAL,IAAe,CAAf;AACA,SAAOG,KAAP;AACD,CAJD,C,CAMA;;;AACAL,YAAY,CAACG,SAAb,CAAuBM,SAAvB,GAAmC,YAAY;AAC7C,MAAIC,CAAC,GAAGZ,IAAI,CAAC,KAAKG,MAAN,EAAc,KAAKC,MAAnB,CAAZ;AACA,OAAKA,MAAL,IAAeQ,CAAC,CAACC,MAAjB;AACA,SAAOD,CAAC,CAACL,KAAT;AACD,CAJD;;AAMAL,YAAY,CAACG,SAAb,CAAuBS,QAAvB,GAAkC,YAAY;AAC5C,MAAIF,CAAC,GAAGZ,IAAI,CAAC,KAAKG,MAAN,EAAc,KAAKC,MAAnB,EAA2B,IAA3B,CAAZ;AACA,OAAKA,MAAL,IAAeQ,CAAC,CAACC,MAAjB;AACA,SAAOD,CAAC,CAACL,KAAT;AACD,CAJD,C,CAMA;;;AACAL,YAAY,CAACG,SAAb,CAAuBU,UAAvB,GAAoC,UAAUF,MAAV,EAAkB;AACpD,MAAIV,MAAM,GAAGU,MAAM,GACf,KAAKV,MAAL,CAAYa,KAAZ,CAAkB,KAAKZ,MAAvB,EAA+B,KAAKA,MAAL,GAAcS,MAA7C,CADe,GAEf,KAAKV,MAAL,CAAYa,KAAZ,CAAkB,KAAKZ,MAAvB,CAFJ;AAGA,OAAKA,MAAL,IAAeS,MAAM,IAAI,KAAKA,MAA9B;AACA,SAAOV,MAAP;AACD,CAND,C,CAQA;;;AACAc,MAAM,CAACC,cAAP,CAAsBhB,YAAY,CAACG,SAAnC,EAA8C,QAA9C,EAAwD;AACtDc,EAAAA,GAAG,EAAE,YAAY;AAAE,WAAO,KAAKhB,MAAL,CAAYU,MAAZ,GAAqB,KAAKT,MAAjC;AAAyC;AADN,CAAxD;AAIAgB,MAAM,CAACC,OAAP,GAAiBnB,YAAjB","sourcesContent":["var vint = require('./vint')\n\nfunction BufferReader (buffer) {\n  this.buffer = buffer\n  this.offset = 0\n}\n\n// a super limited subset of the node buffer API\nBufferReader.prototype.nextInt16BE = function () {\n  var value = this.buffer.readInt16BE(this.offset)\n  this.offset += 2\n  return value\n}\n\nBufferReader.prototype.nextUInt8 = function () {\n  var value = this.buffer.readUInt8(this.offset)\n  this.offset += 1\n  return value\n}\n\n// EBML variable sized integers\nBufferReader.prototype.nextUIntV = function () {\n  var v = vint(this.buffer, this.offset)\n  this.offset += v.length\n  return v.value\n}\n\nBufferReader.prototype.nextIntV = function () {\n  var v = vint(this.buffer, this.offset, true)\n  this.offset += v.length\n  return v.value\n}\n\n// buffer slice\nBufferReader.prototype.nextBuffer = function (length) {\n  var buffer = length\n    ? this.buffer.slice(this.offset, this.offset + length)\n    : this.buffer.slice(this.offset)\n  this.offset += length || this.length\n  return buffer\n}\n\n// remaining bytes to read\nObject.defineProperty(BufferReader.prototype, 'length', {\n  get: function () { return this.buffer.length - this.offset }\n})\n\nmodule.exports = BufferReader\n"]},"metadata":{},"sourceType":"script"}